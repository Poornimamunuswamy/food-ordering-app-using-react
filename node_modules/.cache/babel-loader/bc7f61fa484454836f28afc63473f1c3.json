{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\Food-ordering-app\\\\src\\\\components\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { act } from \"@testing-library/react\";\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingItem = state.items[existingItemIndex];\n    let updatedItems;\n\n    if (existingItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === \"REMOVE\") {\n    const existingItemIndex = state.items.findIndex(item => item.id === action.id);\n    let existingCartItem = state.items[existingItemIndex];\n    const updatedTotalAmount = state.totalAmount - existingCartItem.price;\n\n    if (existingCartItem.amount === 1) {\n      const updatedItem = state.items.filter(item => item.id !== action.id);\n    } else {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount - 1\n      };\n      const updatedItems = [...state.action.items];\n      updatedItems[existingItemIndex] = updatedItem;\n      return {\n        items: updatedItems,\n        totalAmount: updatedTotalAmount\n      };\n    }\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["D:/React/Food-ordering-app/src/components/store/CartProvider.js"],"names":["act","useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingItemIndex","findIndex","id","existingItem","updatedItems","updatedItem","existingCartItem","concat","filter","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import { act } from \"@testing-library/react\";\r\nimport { useReducer } from \"react\";\r\n\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADD\") {\r\n    const updatedTotalAmount =\r\n      state.totalAmount + (action.item.price * action.item.amount);\r\n\r\n    const existingItemIndex = state.items.findIndex(item=>\r\n      item.id === action.item.id );\r\n\r\n    const existingItem = state.items[existingItemIndex];\r\n    let updatedItems;\r\n\r\n    if(existingItem){\r\n      const updatedItem = {\r\n        ...existingCartItem,\r\n        amount: existingCartItem.amount + action.item.amount\r\n      };\r\n      updatedItems = [...state.items];\r\n      updatedItems[existingItemIndex] = updatedItem;\r\n    }\r\n    else{\r\n      updatedItems = state.items.concat(action.item);\r\n    }\r\n    \r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n  if (action.type === \"REMOVE\") {\r\n    \r\n    const existingItemIndex = state.items.findIndex(\r\n      (item) => item.id === action.id\r\n    );\r\n    let existingCartItem = state.items[existingItemIndex];\r\n    const updatedTotalAmount = state.totalAmount - existingCartItem.price;\r\n    if(existingCartItem.amount ===1){\r\n      const updatedItem = state.items.filter(item=> item.id !== action.id);\r\n      }\r\n    else{\r\n      const updatedItem = {\r\n        ...existingCartItem,\r\n        amount: existingCartItem.amount - 1\r\n    }\r\n    const updatedItems = [...state.action.items];\r\n    updatedItems[existingItemIndex] = updatedItem; \r\n     return {\r\n       items: updatedItems,\r\n       totalAmount: updatedTotalAmount,\r\n     };\r\n    }\r\n   \r\n  }\r\n  return defaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n\r\n  const addItemToCartHandler = (item) => {\r\n    dispatchCartAction({ type: \"ADD\", item: item });\r\n  };\r\n\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({ type: \"REMOVE\", id: id });\r\n  };\r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}